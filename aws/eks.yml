Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  InstanceType:
    Type: String

Resources:
  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "eks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  AmazonEKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  ClusterSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster Security Group
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: capstone
      ResourcesVpcConfig:
        EndpointPrivateAccess: true
        EndpointPublicAccess: true
        PublicAccessCidrs:
          - "0.0.0.0/0"
        SecurityGroupIds:
          - Ref: ClusterSecGroup
        SubnetIds:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
      RoleArn: !GetAtt EKSRole.Arn
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: capstone
      NodeRole: !GetAtt AmazonEKSNodeRole.Arn
      InstanceTypes:
        - !Ref InstanceType
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 3
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
    DependsOn: EKSCluster
#  LBSecGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Allow http to our load balancer
#      VpcId:
#        Fn::ImportValue:
#          !Sub "${EnvironmentName}-VPCID"
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: 80
#          ToPort: 80
#          CidrIp: 0.0.0.0/0
#        - IpProtocol: tcp
#          FromPort: 8080
#          ToPort: 8080
#          CidrIp: 0.0.0.0/0
#      SecurityGroupEgress:
#        - IpProtocol: tcp
#          FromPort: 80
#          ToPort: 80
#          CidrIp: 0.0.0.0/0
#  WebAppLB:
#    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#    Properties:
#      Subnets:
#        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
#        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
#      SecurityGroups:
#        - Ref: LBSecGroup
#  Listener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      DefaultActions:
#        - Type: forward
#          TargetGroupArn:
#            Ref: WebAppTargetGroup
#      LoadBalancerArn:
#        Ref: WebAppLB
#      Port: '80'
#      Protocol: HTTP
#  ALBListenerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    Properties:
#      Actions:
#        - Type: forward
#          TargetGroupArn: !Ref 'WebAppTargetGroup'
#      Conditions:
#        - Field: path-pattern
#          Values: [/]
#      ListenerArn: !Ref 'Listener'
#      Priority: 1
#  WebAppTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      HealthCheckIntervalSeconds: 10
#      HealthCheckPath: /
#      HealthCheckProtocol: HTTP
#      HealthCheckTimeoutSeconds: 8
#      HealthyThresholdCount: 2
#      Port: 80
#      Protocol: HTTP
#      UnhealthyThresholdCount: 5
#      VpcId:
#        Fn::ImportValue:
#          Fn::Sub: "${EnvironmentName}-VPCID"
